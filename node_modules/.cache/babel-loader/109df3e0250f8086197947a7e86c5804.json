{"ast":null,"code":"var _jsxFileName = \"/Users/Neo/Thinkful/qualified/Project_Flashcards_Qualified_1/src/Layout/EditCard.js\";\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport CardForm from \"./CardForm\";\nimport BreadCrumb from \"./BreadCrumb\";\nimport { readDeck } from \"../utils/api/index\";\n\nfunction EditCard({\n  fnObj\n}) {\n  const {\n    deckId,\n    cardId\n  } = useParams(); //console.log(\"CARD ID\", cardId)\n\n  let allCards = [];\n  let [card, setCard] = useState({}); //console.log(\"CARD\", card)\n\n  const [deck, setDeck] = useState({});\n\n  const studyDeckSetter = async id => {\n    if (id === undefined) {\n      id = 1;\n    }\n\n    ; //sets an arbitrary id value so the function compiles but it is over written when necessary\n\n    const item = await readDeck(id);\n    const resolved = await Promise.resolve(item);\n    setDeck(resolved); //console.log('STUDY DECK', studyDeck)\n  }; //const url = `http://localhost:5000/cards`;\n  // async function fetchJson(url, options) {\n  //   try {\n  //     const response = await fetch(url, options);\n  //     if (response.status < 200 || response.status > 399) {\n  //       throw new Error(`${response.status} - ${response.statusText}`);\n  //     }\n  //     return await response.json();\n  //   } catch (error) {\n  //     if (error.name !== \"AbortError\") {\n  //       throw error;\n  //     }\n  //   }\n  // }\n  //   let response = await fetchJson(url)\n  //   allCards= await Promise.resolve(response)\n  //   //console.log(allCards)\n  //   for(let item in allCards){\n  //     //console.log(allCards[item].id)\n  //     if(allCards[item].id==cardId){setCard(allCards[item])}\n  //   }\n  //   //console.log('CARD', card.front)\n  // }\n\n\n  useEffect(() => {\n    //getCard();\n    studyDeckSetter(deckId);\n  }, []);\n  const result = /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BreadCrumb, {\n    studyDeck: deck,\n    cardId: cardId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, deck.name, \": Edit Card\")), /*#__PURE__*/React.createElement(CardForm, {\n    studyDeck: deck,\n    fnObj: fnObj,\n    card: card,\n    cardId: cardId,\n    setCard: setCard,\n    cardId: cardId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })));\n  return result;\n}\n\nexport default EditCard;","map":{"version":3,"sources":["/Users/Neo/Thinkful/qualified/Project_Flashcards_Qualified_1/src/Layout/EditCard.js"],"names":["React","useState","useEffect","Fragment","useParams","CardForm","BreadCrumb","readDeck","EditCard","fnObj","deckId","cardId","allCards","card","setCard","deck","setDeck","studyDeckSetter","id","undefined","item","resolved","Promise","resolve","result","name"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,QAApC,QAAmD,OAAnD;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAAQC,QAAR,QAAuB,oBAAvB;;AAEA,SAASC,QAAT,CAAkB;AAACC,EAAAA;AAAD,CAAlB,EAA0B;AACxB,QAAK;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,MAAiBP,SAAS,EAA/B,CADwB,CAExB;;AACA,MAAIQ,QAAQ,GAAC,EAAb;AACA,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAA9B,CAJwB,CAKxB;;AACA,QAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMgB,eAAe,GAAG,MAAOC,EAAP,IAAc;AACpC,QAAGA,EAAE,KAAGC,SAAR,EAAkB;AAACD,MAAAA,EAAE,GAAC,CAAH;AAAK;;AAAA,KADY,CACV;;AAC1B,UAAME,IAAI,GAAG,MAAMb,QAAQ,CAACW,EAAD,CAA3B;AACA,UAAMG,QAAQ,GAAG,MAAMC,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAvB;AACAJ,IAAAA,OAAO,CAACK,QAAD,CAAP,CAJoC,CAKpC;AACD,GAND,CARwB,CAgBxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnB,EAAAA,SAAS,CAAC,MAAI;AACZ;AACAe,IAAAA,eAAe,CAACP,MAAD,CAAf;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,QAAMc,MAAM,gBACV,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAET,IAAvB;AAA6B,IAAA,MAAM,EAAEJ,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKI,IAAI,CAACU,IAAV,gBADF,CADF,eAIE,oBAAC,QAAD;AACE,IAAA,SAAS,EAAEV,IADb;AAEE,IAAA,KAAK,EAAEN,KAFT;AAGE,IAAA,IAAI,EAAEI,IAHR;AAIE,IAAA,MAAM,EAAEF,MAJV;AAKE,IAAA,OAAO,EAAEG,OALX;AAME,IAAA,MAAM,EAAEH,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAFF,CADF;AAkBA,SAAOa,MAAP;AACD;;AAED,eAAehB,QAAf","sourcesContent":["import React, {useState, useEffect, Fragment} from \"react\";\nimport {useParams} from \"react-router-dom\"\nimport CardForm from \"./CardForm\";\nimport BreadCrumb from \"./BreadCrumb\"\nimport {readDeck} from \"../utils/api/index\"\n\nfunction EditCard({fnObj}){\n  const{deckId, cardId}=useParams()\n  //console.log(\"CARD ID\", cardId)\n  let allCards=[]\n  let [card, setCard] = useState({})\n  //console.log(\"CARD\", card)\n  const [deck, setDeck] = useState({})\n\n  const studyDeckSetter = async (id) => {\n    if(id===undefined){id=1}; //sets an arbitrary id value so the function compiles but it is over written when necessary\n    const item = await readDeck(id);\n    const resolved = await Promise.resolve(item);\n    setDeck(resolved);\n    //console.log('STUDY DECK', studyDeck)\n  }\n\n  //const url = `http://localhost:5000/cards`;\n\n  // async function fetchJson(url, options) {\n  //   try {\n  //     const response = await fetch(url, options);\n  //     if (response.status < 200 || response.status > 399) {\n  //       throw new Error(`${response.status} - ${response.statusText}`);\n  //     }\n  //     return await response.json();\n  //   } catch (error) {\n  //     if (error.name !== \"AbortError\") {\n  //       throw error;\n  //     }\n  //   }\n  // }\n  \n  //   let response = await fetchJson(url)\n  //   allCards= await Promise.resolve(response)\n  //   //console.log(allCards)\n  //   for(let item in allCards){\n  //     //console.log(allCards[item].id)\n  //     if(allCards[item].id==cardId){setCard(allCards[item])}\n  //   }\n  //   //console.log('CARD', card.front)\n  // }\n  useEffect(()=>{\n    //getCard();\n    studyDeckSetter(deckId)\n  }, [])\n  \n  const result=(\n    <Fragment>\n      <BreadCrumb studyDeck={deck} cardId={cardId}/>\n      <div className=\"container\">\n        <div className=\"row\">\n          <h3>{deck.name}: Edit Card</h3>\n        </div>\n        <CardForm \n          studyDeck={deck} \n          fnObj={fnObj} \n          card={card}\n          cardId={cardId}\n          setCard={setCard}\n          cardId={cardId}\n        />\n      </div>\n    </Fragment>\n  )\n  return result;\n}\n\nexport default EditCard;"]},"metadata":{},"sourceType":"module"}